sudo: required
dist: trusty
language: bash

stages:
  - name: Terraform run
  - name: Perform tests
  - name: Deploy code
    if: branch = master && type != cron  

services:
  - docker

install:
  - sudo apt-add-repository "deb http://archive.ubuntu.com/ubuntu trusty-backports main restricted universe multiverse"
  - sudo apt-get -qq update
  - sudo apt-get -t trusty-backports install shellcheck
  - sudo pip install awscli  
  - curl -sLo /tmp/terraform.zip https://releases.hashicorp.com/terraform/0.12.5/terraform_0.12.5_linux_amd64.zip
  - unzip /tmp/terraform.zip -d /tmp
  - mv /tmp/terraform ~/bin
  - export PATH="~/bin:$PATH"

jobs:
  include:
    - stage: Perform tests
      script:
        - echo "Check for commit ${TRAVIS_COMMIT} and tag ${TRAVIS_TAG} from branch ${TRAVIS_BRANCH}."
        - echo "This is build number ${TRAVIS_BUILD_NUMBER}, for ${TRAVIS_REPO_SLUG}."
        - mkdir /tmp/config-custom
        - docker pull almerhor/pylint:default
        - docker run --rm -v $(pwd):/pylint -v $(pwd)/test:/tmp/config-custom almerhor/pylint:default py/cloud_control_change_type_ec2.py requirements-custom.txt
    
    - stage: Perform tests
      dist: trusty
      language: java
      sudo: required
      addons:
        sonarcloud:
          organization: "alexa-cloud-control"
          token: 
            secure: "htfOlTSMo6mueq5myfwiCXTHCIue/dT15o4WM2vNqmtYKmtQi+kGjU37zeioSLKopHALST/B2j4Iab7/9Etw2oCGD+Xr+Lt2ekrx7w6yJgVW5v3DMhJ2qBnrbwWRSk2owx1B/xZUuFK6Z4cQA2Fawg0F1ayHRYcsdg9D2V22ET75aUL31V6tkINqcoL2QEhsKuuFbW2CgSShOeIAESRGwtb25nUVZdd1uH/uEA3IbI3+ksuma0RfuebFCNY/w3fZ+kXTX99Gg1evEGwKHyOgb9pc0jf+Jz6MRzM3U/495v3rMFmK+4CdEfv+e/agVjyRsfIXcUty4Z2Ux+0azJJviv6ZWXDyQzuK6QHWYx0Y/4uKZv+G0xEeHtfuvmzY50XF5wEEcIW6sKV607aj64GtzU3DHSw56wo/e/FuSnKvy1ACGkw/tqAPmxg2iqP9bQa1mrkcDTT02H678kfZZEaQtLOdzqRHPJ1Ct5ak/29D3P6B61EkVm2Kz/jyTPF9OXKIP5XC7XQveb3dP25e3HpudjHnfL4t4q/zj0ldr4ImEo9aX/wQycV49RZ5qJAQiYn8Qzx3c45gE5fB54LGkGkYq4toDIrxIOhYJYmFbiGNzDioD4OLOve2F3YhKojMm7UW0R0KGl0wMCK7NGWzVfTufbJsR0+Iy3BwAfSgFrNy5AY="

      
      jdk:
        - oraclejdk8

      script:
        - sudo chmod +x $(which sonar-scanner)
        - export PATH=$(dirname $(which sonar-scanner)):$PATH
        - sonar-scanner

    - stage: Terraform run
      env:
        - TF_INPUT=false # No interraction
      script:
        - cd provision
        - echo "Feeding terraform.tf with variables."
        - sed -i -e "s/STATEBUCKETNAME/${terraform_bucket}/g" terraform.tf_template
        - sed -i -e "s/TABLENAME/${terraform_table}/g" terraform.tf_template
        - sed -i -e "s/REGION/${terraform_region}/g" terraform.tf_template
        - mv terraform.tf_template terraform.tf
        - echo "Feeding terraform.tfvars with variables."
        - sed -i -e "s/REGION/${terraform_region}/g" terraform.tfvars_template
        - sed -i -e "s/TABLENAME/${terraform_table}/g" terraform.tfvars_template
        - sed -i -e "s/STATEBUCKETNAME/${terraform_bucket}/g" terraform.tfvars_template
        - sed -i -e "s/ARTIFACTBUCKETNAME/${artifact_bucket}/g" terraform.tfvars_template
        - sed -i -e "s/ENVIRONMENT/${terraform_environment}/g" terraform.tfvars_template
        - mv terraform.tfvars_template terraform.tfvars
        - terraform init
        - terraform validate
        - ./execute.sh

    - stage: Deploy code
      script: skip
      deploy:
        - provider: s3
          bucket: "${artifact_bucket}"
          local_dir: py
          skip_cleanup: true

        - provider: lambda
          function_name: "cloud_control_change_type_ec2"
          region: "${terraform_region}"
          role: "arn:aws:iam::${account_number}:role/LambdaAlexaCloudControlEc2ChangeTypeIamRole"
          runtime: "python3.6"
          module_name: "cloud_control_change_type_ec2"
          handler_name: "cloud_control_change_type_ec2"
          description: "Alexa EC2 - change type of EC2"
          memory_size: 128
          timeout: 5
          zip: py/cloud_control_change_type_ec2.py
          

